<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--CustomMiniScrollViewer-->
    <Style x:Key="CustomMiniScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" />
                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Grid.Column="1"
                                   Style="{DynamicResource MiniVerticalScrollBar}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Orientation="Vertical"
                                   Value="{TemplateBinding VerticalOffset}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Grid.Row="1"
                                   Grid.Column="0"
                                   Style="{DynamicResource MiniVerticalScrollBar}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Orientation="Horizontal"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MiniScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border BorderBrush="Transparent"></Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MiniScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="Icon" Background="{DynamicResource PrimaryGrayBrush}" CornerRadius="2" Width="4"/>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Background" Value="{DynamicResource PrimaryBlueBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MiniVerticalScrollBar"  TargetType="ScrollBar">
        <Setter Property="Width" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Border Background="{DynamicResource SecundaryGrayBrush}" CornerRadius="2" Width="4">
                        <Track Name="PART_Track"
                   IsDirectionReversed="True">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource MiniScrollBarPageButtonStyle}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource MiniScrollBarThumbStyle}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource MiniScrollBarPageButtonStyle}">
                                </RepeatButton>
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--BackButtonStyle-->
    <Style x:Key="BackButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryGrayBrush}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="30"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="2,2,2,2" BorderBrush="{DynamicResource PrimaryGrayBrush}"
                            
                            CornerRadius="5,5,5,5">

                        <Path x:Name="Icon" Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"  Height="15" Width="15" Stretch="Uniform"  Fill="{DynamicResource PrimaryGrayBrush}" 
                              VerticalAlignment="Center" HorizontalAlignment="Center"/>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource PrimaryBlueBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PrimaryBlueBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ToggleButtonStyle-->
    <Style x:Key="ToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal" Height="30" Background="Transparent">
                            <TextBlock Text="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" Foreground="{DynamicResource PrimaryBlueBrush}"
                                       FontSize="16" FontWeight="DemiBold" VerticalAlignment="Center"/>
                            <Path x:Name="Icon" Data="{DynamicResource chevronDown}"  Height="10" Width="10" Stretch="Uniform"  
                                  Fill="{DynamicResource PrimaryBlueBrush}" 
                              VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10,0,0,0"/>
                        </StackPanel>

                        <Border x:Name="Border" Visibility="Hidden" Background="{DynamicResource PrimaryBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource PrimaryGrayBrush}">
                            <ItemsControl MaxHeight="60" ItemsSource="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}">

                                <ItemsControl.Template>
                                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                                        <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled"
                                                      Style="{DynamicResource CustomMiniScrollViewer}">
                                            <ItemsPresenter></ItemsPresenter>
                                        </ScrollViewer>
                                    </ControlTemplate>
                                </ItemsControl.Template>

                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>

                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Button Command="{Binding Path=DataContext.User_Click , RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" CommandParameter="{Binding}">
                                            <Button.Template>
                                                <ControlTemplate>
                                                    <Border x:Name="BorderElement" Background="Transparent" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource PrimaryGrayBrush}">
                                                        <TextBlock x:Name="TextBlock" Text="{Binding Path=UserId}" Margin="8,0,0,0" FontSize="14" Foreground="{DynamicResource TextSecundaryBrush}"/>
                                                    </Border>

                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="BorderElement" Property="Background" Value="{DynamicResource SecundaryBlueBrush}"/>
                                                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource TextPrimaryBrush}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Button.Template>
                                        </Button>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Border>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>

    <!--CheckBoxSwitchStyle-->
    <Style x:Key="CheckBoxSwitchStyle" TargetType="ToggleButton">
        <Setter Property="Margin" Value="15,0,0,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryGrayBrush}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <StackPanel Orientation="Horizontal">
                        <Grid Cursor="Hand">
                            <Border Width="30" Height="10" Background="LightGray" CornerRadius="5"/>
                            <Border x:Name="button" Height="15" Width="15" CornerRadius="12.5" HorizontalAlignment="Left"/>
                        </Grid>
                        <TextBlock x:Name="txtName" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="15, 0, 0, 0"
                                                Grid.Column="1" Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"
                                                FontWeight="{TemplateBinding FontWeight}"
                                                FontSize="{TemplateBinding FontSize}"/>
                    </StackPanel>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="right">
                            <ThicknessAnimation Storyboard.TargetProperty="Margin" Storyboard.TargetName="button" Duration="0:0:0.4" From="0,0,0,0" To="15,0,0,0" >
                                <ThicknessAnimation.EasingFunction>
                                    <CircleEase EasingMode="EaseOut"/>
                                </ThicknessAnimation.EasingFunction>
                            </ThicknessAnimation>
                        </Storyboard>
                        <Storyboard x:Key="left">
                            <ThicknessAnimation Storyboard.TargetProperty="Margin" Storyboard.TargetName="button" Duration="0:0:0.4" From="15,0,0,0" To="0,0,0,0" >
                                <ThicknessAnimation.EasingFunction>
                                    <CircleEase EasingMode="EaseOut"/>
                                </ThicknessAnimation.EasingFunction>
                            </ThicknessAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="leftt"></RemoveStoryboard>
                                <BeginStoryboard Storyboard="{StaticResource right}" x:Name="rightt" ></BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter TargetName="button" Property="Background" Value="{DynamicResource ScrollBacgroundBrush}"></Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="rightt"></RemoveStoryboard>
                                <BeginStoryboard Storyboard="{StaticResource left}" x:Name="leftt" ></BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter TargetName="button" Property="Background" Value="{DynamicResource PrimaryBlueBrush}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Start: Button | Minimize | Maximize | Close -->
    <Style x:Key="IconButtonsStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="25"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="bd" CornerRadius="5" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Path Name="ico" Data="{TemplateBinding Content}" Fill="{DynamicResource ActionIconBrush}" Height="10" Width="10" Stretch="Uniform"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SecundaryBackgroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Tag" Value="IsCloseButton"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#F72626"/>
                            <Setter TargetName="ico" Property="Fill" Value="{DynamicResource PrimaryBackgroundBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ico" Property="Fill" Value="{DynamicResource PrimaryBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End: Button | Minimize | Maximize | Close -->

    <!-- Start: Menu Icon -->
    <Style x:Key="MenuIconStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Viewbox Height="20" Width="20" Margin="0 6 0 0" Stretch="UniformToFill">
                            <Canvas Height="512" Width="512">
                                <Path x:Name="ico" Data="m32 0h448c17.671875 0 32 14.328125 32 32s-14.328125 32-32 32h-448c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32zm0 0" Fill="{DynamicResource PrimaryGrayBrush}" Margin="0 0 0 0"/>
                                <Path x:Name="ico1" Data="m32 128h448c17.671875 0 32 14.328125 32 32s-14.328125 32-32 32h-448c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32zm0 0" Fill="{DynamicResource PrimaryGrayBrush}" Margin="0 20 0 0"/>
                                <Path x:Name="ico2" Data="m32 256h448c17.671875 0 32 14.328125 32 32s-14.328125 32-32 32h-448c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32zm0 0" Fill="{DynamicResource PrimaryGrayBrush}" Margin="0 40 0 0"/>
                            </Canvas>
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFFFFF"/>
                            <Setter Property="Fill" TargetName="ico" Value="{DynamicResource PrimaryBlueBrush}"/>
                            <Setter Property="Fill" TargetName="ico1" Value="{DynamicResource PrimaryBlueBrush}"/>
                            <Setter Property="Fill" TargetName="ico2" Value="{DynamicResource PrimaryBlueBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End: Menu Icon -->

    <!-- Start: VerticalMenuStyle -->
    <Style x:Key="MenuRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryGrayBrush}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="menuButton"  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <!-- Selected  -->
                            <Border x:Name="btnSelected" Grid.ColumnSpan="2"  CornerRadius="4" Width="210" HorizontalAlignment="Right"/>

                            <!-- Indicator -->
                            <Rectangle Name="Indicator" HorizontalAlignment="Left" Width="4" Height="40" VerticalAlignment="Center" RadiusX="2" RadiusY="2"/>

                            <!-- Icon -->
                            <Path x:Name="Icon" Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type RadioButton}}}" Height="24" Width="24" Stretch="None" Fill="{DynamicResource PrimaryGrayBrush}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0 0 5 0"/>

                            <!-- Text -->
                            <TextBlock x:Name="txtName" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="12 0 0 0"
                                                Grid.Column="1" Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"
                                                FontWeight="{TemplateBinding FontWeight}"
                                                FontSize="{TemplateBinding FontSize}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="txtName" Property="Foreground" Value="{DynamicResource PrimaryBlueBrush}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource PrimaryBlueBrush}"/>
                           <!-- Optional 
                            <Setter TargetName="Indicator" Property="Fill" Value="red"/>
                            <Setter TargetName="Indicator" Property="Height" Value="20"/>-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource PrimaryBlueBrush}"/>
                            <Setter TargetName="Indicator" Property="Fill" Value="{DynamicResource PrimaryBlueBrush}"/>
                            <Setter TargetName="Indicator" Property="Height" Value="20"/>
                            <Setter TargetName="btnSelected" Property="Background" Value="{DynamicResource SecundaryGrayBrush}"/>
                            <Setter TargetName="txtName" Property="Foreground" Value="{DynamicResource PrimaryBlueBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End: VerticalMenuStyle -->
</ResourceDictionary>